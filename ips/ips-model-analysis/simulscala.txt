case class CaseData(name:String,age:Int)

type colset00000001 = (Int,String)

type colset00000002 = (Int,String,CaseData)

case class Binding00000001(entity:Option[colset00000001]) extends Bind
val Eval00000001 = (b1:Binding00000001, b2:Binding00000001) => {
	(b1.entity == b2.entity || b1.entity == None || b2.entity == None)
}
val Merge00000001 = (b1:Binding00000001, b2:Binding00000001) => {
	val entity = if(b1.entity == None) b2.entity else b1.entity;
	Binding00000001(entity)
}
type colset00000003 = Int

val map00000001 = Map[(colset00000003,Long),Int]( ((1,0),1) )
val ms00000001 = new Multiset[colset00000003](map00000001)
val place00000001 = new Place("place00000001","Customer MU_dgp1",ms00000001)
place00000001.setOrigin(Map[String,String](("0-generator-1","Customer MU_dgp1")))
cgraph.addPlace(place00000001)

val map00000002 = Map[(colset00000001,Long),Int](  )
val ms00000002 = new Multiset[colset00000001](map00000002)
val place00000002 = new Place("place00000002","Customer MU_dgp2",ms00000002)
place00000002.setOrigin(Map[String,String](("0-generator-1","Customer MU_dgp2")))
cgraph.addPlace(place00000002)

val map00000003 = Map[(colset00000002,Long),Int](  )
val ms00000003 = new Multiset[colset00000002](map00000003)
val place00000003 = new Place("place00000003","Customer MU_dgpData",ms00000003)
place00000003.setOrigin(Map[String,String](("0-generator-1","Customer MU_dgpData")))
cgraph.addPlace(place00000003)

case class Binding00000002(tid:Option[Int],gid:Option[String],data:Option[CaseData]) extends Bind
val Eval00000002 = (b1:Binding00000002, b2:Binding00000002) => {
	(b1.tid == b2.tid || b1.tid == None || b2.tid == None) && (b1.gid == b2.gid || b1.gid == None || b2.gid == None) && (b1.data == b2.data || b1.data == None || b2.data == None)
}
val Merge00000002 = (b1:Binding00000002, b2:Binding00000002) => {
	val tid = if(b1.tid == None) b2.tid else b1.tid;val gid = if(b1.gid == None) b2.gid else b1.gid;val data = if(b1.data == None) b2.data else b1.data;
	Binding00000002(tid,gid,data)
}
val Guard00000001 = new Guard[Binding00000002]()
val BindGuard00000001 = (b:Binding00000002) => {b.tid.get < 100}
Guard00000001.setGuardBind(BindGuard00000001)
def actionFun00000001(b:Binding00000002):Binding00000002 = { val r = new java.util.Random()
val rint = r.nextInt();val gid = "0-generator-1"
val data = CaseData("nama"+rint,rint)
Binding00000002(b.tid,Some(gid),Some(data)) }

val action00000001 = new Action[Binding00000002]()
action00000001.setActionFun(actionFun00000001)

val trans00000001 = new Transition[Binding00000002]("trans00000001","Customer MU_dgt1",Guard00000001,action00000001)
trans00000001.setEval(Eval00000002)
trans00000001.setMerge(Merge00000002)
trans00000001.setOrigin(Map[String,String](("Map[String,String](0-generator-1,Customer MU_dgt1)","Customer MU_dgt1")))
cgraph.addTransition(trans00000001)

val arcexp00000001 = (inp:Any) => inp match { case tid:colset00000003 => { Some(tid) } }
val tTb00000001 = (inp:Any) => Binding00000002(inp match { case tid:colset00000003 => Some(tid); case _ => None }, None, None)
val bTt00000001 = (b:Binding00000002) => {b.tid.get}
val arc00000001 = new Arc[colset00000003,Binding00000002]("arc00000001",place00000001,trans00000001,Direction.PtT)
arc00000001.setIsBase(true)
arc00000001.setArcExp(arcexp00000001)
arc00000001.setTokenToBind(tTb00000001)
arc00000001.setBindToToken(bTt00000001)
arc00000001.setBindToToken(bTt00000001)
arc00000001.setOrigin(Map[String,String](("0-generator-1","arc00000001")))
cgraph.addArc(arc00000001)

val arcexp00000002 = (inp:Any) => inp match { case tid:colset00000003 => { Some(tid+1) } }
val tTb00000002 = (inp:Any) => Binding00000002(inp match { case tid:colset00000003 => Some(tid); case _ => None }, None, None)
val bTt00000002 = (b:Binding00000002) => {b.tid.get}
val addTime00000001 = (b:Binding00000002) => {Math.round(Gaussian(100,10).draw())}
val arc00000002 = new Arc[colset00000003,Binding00000002]("arc00000002",place00000001,trans00000001,Direction.TtP)
arc00000002.setIsBase(false)
arc00000002.setArcExp(arcexp00000002)
arc00000002.setTokenToBind(tTb00000002)
arc00000002.setBindToToken(bTt00000002)
arc00000002.setBindToToken(bTt00000002)
arc00000002.setAddTime(addTime00000001)
arc00000002.setOrigin(Map[String,String](("0-generator-1","arc00000002")))
cgraph.addArc(arc00000002)

val arcexp00000003 = (inp:Any) => inp match { case (tid:colset00000003,gid:String) => { Some(tid,gid) } }
val tTb00000003 = (inp:Any) => Binding00000002(inp match { case (tid:colset00000003,gid:Any) => Some(tid); case _ => None }, inp match { case (tid:Any,gid:String) => Some(gid); case _ => None }, None)
val bTt00000003 = (b:Binding00000002) => {(b.tid.get,b.gid.get)}
val arc00000003 = new Arc[colset00000001,Binding00000002]("arc00000003",place00000002,trans00000001,Direction.TtP)
arc00000003.setIsBase(false)
arc00000003.setArcExp(arcexp00000003)
arc00000003.setTokenToBind(tTb00000003)
arc00000003.setBindToToken(bTt00000003)
arc00000003.setBindToToken(bTt00000003)
arc00000003.setOrigin(Map[String,String](("0-generator-1","arc00000003")))
cgraph.addArc(arc00000003)

val arcexp00000004 = (inp:Any) => inp match { case (tid:colset00000003,gid:String,data:CaseData) => { Some(tid,gid,data) } }
val tTb00000004 = (inp:Any) => Binding00000002(inp match { case (tid:colset00000003,gid:Any,data:Any) => Some(tid); case _ => None }, inp match { case (tid:Any,gid:String,data:Any) => Some(gid); case _ => None }, inp match { case (tid:Any,gid:Any,data:CaseData) => Some(data); case _ => None })
val bTt00000004 = (b:Binding00000002) => {(b.tid.get,b.gid.get,b.data.get)}
val arc00000004 = new Arc[colset00000002,Binding00000002]("arc00000004",place00000003,trans00000001,Direction.TtP)
arc00000004.setIsBase(false)
arc00000004.setArcExp(arcexp00000004)
arc00000004.setTokenToBind(tTb00000004)
arc00000004.setBindToToken(bTt00000004)
arc00000004.setBindToToken(bTt00000004)
arc00000004.setOrigin(Map[String,String](("0-generator-1","arc00000004")))
cgraph.addArc(arc00000004)

val map00000004 = Map[(colset00000001,Long),Int](  )
val ms00000004 = new Multiset[colset00000001](map00000004)
val place00000004 = new Place("place00000004","Teller Service_nap1",ms00000004)
place00000004.setOrigin(Map[String,String](("0-activity-1","Teller Service_nap1")))
cgraph.addPlace(place00000004)

val trans00000002 = new Transition[Binding00000001]("trans00000002","Teller Service_natstart",null,null)
trans00000002.setEval(Eval00000001)
trans00000002.setMerge(Merge00000001)
trans00000002.setOrigin(Map[String,String](("0-activity-1","Teller Service_natstart")))
cgraph.addTransition(trans00000002)

val arcexp00000005 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000005 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000005 = (b:Binding00000001) => {b.entity.get}
val arc00000005 = new Arc[colset00000001,Binding00000001]("arc00000005",place00000004,trans00000002,Direction.PtT)
arc00000005.setIsBase(true)
arc00000005.setArcExp(arcexp00000005)
arc00000005.setTokenToBind(tTb00000005)
arc00000005.setBindToToken(bTt00000005)
arc00000005.setBindToToken(bTt00000005)
arc00000005.setOrigin(Map[String,String](("0-activity-1","arc00000005")))
cgraph.addArc(arc00000005)

val map00000005 = Map[(colset00000001,Long),Int](  )
val ms00000005 = new Multiset[colset00000001](map00000005)
val place00000005 = new Place("place00000005","Teller Service_nap2",ms00000005)
place00000005.setOrigin(Map[String,String](("0-activity-1","Teller Service_nap2")))
cgraph.addPlace(place00000005)

val arcexp00000006 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000006 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000006 = (b:Binding00000001) => {b.entity.get}
val addTime00000002 = (b:Binding00000001) => {Math.round(Gaussian(400, 70).draw())}
val arc00000006 = new Arc[colset00000001,Binding00000001]("arc00000006",place00000005,trans00000002,Direction.TtP)
arc00000006.setIsBase(false)
arc00000006.setArcExp(arcexp00000006)
arc00000006.setTokenToBind(tTb00000006)
arc00000006.setBindToToken(bTt00000006)
arc00000006.setBindToToken(bTt00000006)
arc00000006.setAddTime(addTime00000002)
arc00000006.setOrigin(Map[String,String](("0-activity-1","arc00000006")))
cgraph.addArc(arc00000006)

val trans00000003 = new Transition[Binding00000001]("trans00000003","Teller Service_natend",null,null)
trans00000003.setEval(Eval00000001)
trans00000003.setMerge(Merge00000001)
trans00000003.setOrigin(Map[String,String](("0-activity-1","Teller Service_natend")))
cgraph.addTransition(trans00000003)

val arcexp00000007 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000007 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000007 = (b:Binding00000001) => {b.entity.get}
val arc00000007 = new Arc[colset00000001,Binding00000001]("arc00000007",place00000005,trans00000003,Direction.PtT)
arc00000007.setIsBase(true)
arc00000007.setArcExp(arcexp00000007)
arc00000007.setTokenToBind(tTb00000007)
arc00000007.setBindToToken(bTt00000007)
arc00000007.setBindToToken(bTt00000007)
arc00000007.setOrigin(Map[String,String](("0-activity-1","arc00000007")))
cgraph.addArc(arc00000007)

val map00000006 = Map[(colset00000001,Long),Int](  )
val ms00000006 = new Multiset[colset00000001](map00000006)
val place00000006 = new Place("place00000006","Teller Service_nap3",ms00000006)
place00000006.setOrigin(Map[String,String](("0-activity-1","Teller Service_nap3")))
cgraph.addPlace(place00000006)

val arcexp00000008 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000008 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000008 = (b:Binding00000001) => {b.entity.get}
val arc00000008 = new Arc[colset00000001,Binding00000001]("arc00000008",place00000006,trans00000003,Direction.TtP)
arc00000008.setIsBase(false)
arc00000008.setArcExp(arcexp00000008)
arc00000008.setTokenToBind(tTb00000008)
arc00000008.setBindToToken(bTt00000008)
arc00000008.setBindToToken(bTt00000008)
arc00000008.setOrigin(Map[String,String](("0-activity-1","arc00000008")))
cgraph.addArc(arc00000008)

val map00000007 = Map[(colset00000001,Long),Int](  )
val ms00000007 = new Multiset[colset00000001](map00000007)
val place00000007 = new Place("place00000007","ATM Service_nap1",ms00000007)
place00000007.setOrigin(Map[String,String](("0-activity-2","ATM Service_nap1")))
cgraph.addPlace(place00000007)

val trans00000004 = new Transition[Binding00000001]("trans00000004","ATM Service_natstart",null,null)
trans00000004.setEval(Eval00000001)
trans00000004.setMerge(Merge00000001)
trans00000004.setOrigin(Map[String,String](("0-activity-2","ATM Service_natstart")))
cgraph.addTransition(trans00000004)

val arcexp00000009 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000009 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000009 = (b:Binding00000001) => {b.entity.get}
val arc00000009 = new Arc[colset00000001,Binding00000001]("arc00000009",place00000007,trans00000004,Direction.PtT)
arc00000009.setIsBase(true)
arc00000009.setArcExp(arcexp00000009)
arc00000009.setTokenToBind(tTb00000009)
arc00000009.setBindToToken(bTt00000009)
arc00000009.setBindToToken(bTt00000009)
arc00000009.setOrigin(Map[String,String](("0-activity-2","arc00000009")))
cgraph.addArc(arc00000009)

val map00000008 = Map[(colset00000001,Long),Int](  )
val ms00000008 = new Multiset[colset00000001](map00000008)
val place00000008 = new Place("place00000008","ATM Service_nap2",ms00000008)
place00000008.setOrigin(Map[String,String](("0-activity-2","ATM Service_nap2")))
cgraph.addPlace(place00000008)

val arcexp00000010 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000010 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000010 = (b:Binding00000001) => {b.entity.get}
val addTime00000003 = (b:Binding00000001) => {Math.round(Gaussian(300, 30).draw())}
val arc00000010 = new Arc[colset00000001,Binding00000001]("arc00000010",place00000008,trans00000004,Direction.TtP)
arc00000010.setIsBase(false)
arc00000010.setArcExp(arcexp00000010)
arc00000010.setTokenToBind(tTb00000010)
arc00000010.setBindToToken(bTt00000010)
arc00000010.setBindToToken(bTt00000010)
arc00000010.setAddTime(addTime00000003)
arc00000010.setOrigin(Map[String,String](("0-activity-2","arc00000010")))
cgraph.addArc(arc00000010)

val trans00000005 = new Transition[Binding00000001]("trans00000005","ATM Service_natend",null,null)
trans00000005.setEval(Eval00000001)
trans00000005.setMerge(Merge00000001)
trans00000005.setOrigin(Map[String,String](("0-activity-2","ATM Service_natend")))
cgraph.addTransition(trans00000005)

val arcexp00000011 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000011 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000011 = (b:Binding00000001) => {b.entity.get}
val arc00000011 = new Arc[colset00000001,Binding00000001]("arc00000011",place00000008,trans00000005,Direction.PtT)
arc00000011.setIsBase(true)
arc00000011.setArcExp(arcexp00000011)
arc00000011.setTokenToBind(tTb00000011)
arc00000011.setBindToToken(bTt00000011)
arc00000011.setBindToToken(bTt00000011)
arc00000011.setOrigin(Map[String,String](("0-activity-2","arc00000011")))
cgraph.addArc(arc00000011)

val map00000009 = Map[(colset00000001,Long),Int](  )
val ms00000009 = new Multiset[colset00000001](map00000009)
val place00000009 = new Place("place00000009","ATM Service_nap3",ms00000009)
place00000009.setOrigin(Map[String,String](("0-activity-2","ATM Service_nap3")))
cgraph.addPlace(place00000009)

val arcexp00000012 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000012 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000012 = (b:Binding00000001) => {b.entity.get}
val arc00000012 = new Arc[colset00000001,Binding00000001]("arc00000012",place00000009,trans00000005,Direction.TtP)
arc00000012.setIsBase(false)
arc00000012.setArcExp(arcexp00000012)
arc00000012.setTokenToBind(tTb00000012)
arc00000012.setBindToToken(bTt00000012)
arc00000012.setBindToToken(bTt00000012)
arc00000012.setOrigin(Map[String,String](("0-activity-2","arc00000012")))
cgraph.addArc(arc00000012)

val map00000010 = Map[(colset00000001,Long),Int](  )
val ms00000010 = new Multiset[colset00000001](map00000010)
val place00000010 = new Place("place00000010","null_nop1",ms00000010)
place00000010.setOrigin(Map[String,String](("0-stop-3","null_nop1")))
cgraph.addPlace(place00000010)

val map00000011 = Map[(colset00000001,Long),Int](  )
val ms00000011 = new Multiset[colset00000001](map00000011)
val place00000011 = new Place("place00000011","1_bp",ms00000011)
place00000011.setOrigin(Map[String,String](("0-branch-4","1_bp")))
cgraph.addPlace(place00000011)

val map00000012 = Map[(colset00000001,Long),Int](  )
val ms00000012 = new Multiset[colset00000001](map00000012)
val place00000012 = new Place("place00000012","1_bpi0s",ms00000012)
place00000012.setOrigin(Map[String,String](("0-branch-4","1_bpi0s")))
cgraph.addPlace(place00000012)

val trans00000006 = new Transition[Binding00000001]("trans00000006","1_temps_0",null,null)
trans00000006.setEval(Eval00000001)
trans00000006.setMerge(Merge00000001)
trans00000006.setOrigin(Map[String,String](("0-branch-4","1_temps_0")))
cgraph.addTransition(trans00000006)

val arcexp00000013 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000013 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000013 = (b:Binding00000001) => {b.entity.get}
val arc00000013 = new Arc[colset00000001,Binding00000001]("arc00000013",place00000012,trans00000006,Direction.PtT)
arc00000013.setIsBase(true)
arc00000013.setArcExp(arcexp00000013)
arc00000013.setTokenToBind(tTb00000013)
arc00000013.setBindToToken(bTt00000013)
arc00000013.setBindToToken(bTt00000013)
arc00000013.setOrigin(Map[String,String](("0-branch-4","arc00000013")))
cgraph.addArc(arc00000013)

val arcexp00000014 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000014 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000014 = (b:Binding00000001) => {b.entity.get}
val arc00000014 = new Arc[colset00000001,Binding00000001]("arc00000014",place00000011,trans00000006,Direction.TtP)
arc00000014.setIsBase(false)
arc00000014.setArcExp(arcexp00000014)
arc00000014.setTokenToBind(tTb00000014)
arc00000014.setBindToToken(bTt00000014)
arc00000014.setBindToToken(bTt00000014)
arc00000014.setOrigin(Map[String,String](("0-branch-4","arc00000014")))
cgraph.addArc(arc00000014)

val map00000013 = Map[(colset00000001,Long),Int](  )
val ms00000013 = new Multiset[colset00000001](map00000013)
val place00000013 = new Place("place00000013","1_bpo0s",ms00000013)
place00000013.setOrigin(Map[String,String](("0-branch-4","1_bpo0s")))
cgraph.addPlace(place00000013)

val trans00000007 = new Transition[Binding00000001]("trans00000007","1_temps_0",null,null)
trans00000007.setEval(Eval00000001)
trans00000007.setMerge(Merge00000001)
trans00000007.setOrigin(Map[String,String](("0-branch-4","1_temps_0")))
cgraph.addTransition(trans00000007)

val arcexp00000015 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000015 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000015 = (b:Binding00000001) => {b.entity.get}
val arc00000015 = new Arc[colset00000001,Binding00000001]("arc00000015",place00000011,trans00000007,Direction.PtT)
arc00000015.setIsBase(true)
arc00000015.setArcExp(arcexp00000015)
arc00000015.setTokenToBind(tTb00000015)
arc00000015.setBindToToken(bTt00000015)
arc00000015.setBindToToken(bTt00000015)
arc00000015.setOrigin(Map[String,String](("0-branch-4","arc00000015")))
cgraph.addArc(arc00000015)

val arcexp00000016 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000016 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000016 = (b:Binding00000001) => {b.entity.get}
val arc00000016 = new Arc[colset00000001,Binding00000001]("arc00000016",place00000013,trans00000007,Direction.TtP)
arc00000016.setIsBase(false)
arc00000016.setArcExp(arcexp00000016)
arc00000016.setTokenToBind(tTb00000016)
arc00000016.setBindToToken(bTt00000016)
arc00000016.setBindToToken(bTt00000016)
arc00000016.setOrigin(Map[String,String](("0-branch-4","arc00000016")))
cgraph.addArc(arc00000016)

val map00000014 = Map[(colset00000001,Long),Int](  )
val ms00000014 = new Multiset[colset00000001](map00000014)
val place00000014 = new Place("place00000014","1_bpo1s",ms00000014)
place00000014.setOrigin(Map[String,String](("0-branch-4","1_bpo1s")))
cgraph.addPlace(place00000014)

val trans00000008 = new Transition[Binding00000001]("trans00000008","1_temps_1",null,null)
trans00000008.setEval(Eval00000001)
trans00000008.setMerge(Merge00000001)
trans00000008.setOrigin(Map[String,String](("0-branch-4","1_temps_1")))
cgraph.addTransition(trans00000008)

val arcexp00000017 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000017 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000017 = (b:Binding00000001) => {b.entity.get}
val arc00000017 = new Arc[colset00000001,Binding00000001]("arc00000017",place00000011,trans00000008,Direction.PtT)
arc00000017.setIsBase(true)
arc00000017.setArcExp(arcexp00000017)
arc00000017.setTokenToBind(tTb00000017)
arc00000017.setBindToToken(bTt00000017)
arc00000017.setBindToToken(bTt00000017)
arc00000017.setOrigin(Map[String,String](("0-branch-4","arc00000017")))
cgraph.addArc(arc00000017)

val arcexp00000018 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000018 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000018 = (b:Binding00000001) => {b.entity.get}
val arc00000018 = new Arc[colset00000001,Binding00000001]("arc00000018",place00000014,trans00000008,Direction.TtP)
arc00000018.setIsBase(false)
arc00000018.setArcExp(arcexp00000018)
arc00000018.setTokenToBind(tTb00000018)
arc00000018.setBindToToken(bTt00000018)
arc00000018.setBindToToken(bTt00000018)
arc00000018.setOrigin(Map[String,String](("0-branch-4","arc00000018")))
cgraph.addArc(arc00000018)

val map00000015 = Map[(colset00000001,Long),Int](  )
val ms00000015 = new Multiset[colset00000001](map00000015)
val place00000015 = new Place("place00000015","2_bp",ms00000015)
place00000015.setOrigin(Map[String,String](("0-branch-5","2_bp")))
cgraph.addPlace(place00000015)

val map00000016 = Map[(colset00000001,Long),Int](  )
val ms00000016 = new Multiset[colset00000001](map00000016)
val place00000016 = new Place("place00000016","2_bpi0s",ms00000016)
place00000016.setOrigin(Map[String,String](("0-branch-5","2_bpi0s")))
cgraph.addPlace(place00000016)

val trans00000009 = new Transition[Binding00000001]("trans00000009","2_temps_0",null,null)
trans00000009.setEval(Eval00000001)
trans00000009.setMerge(Merge00000001)
trans00000009.setOrigin(Map[String,String](("0-branch-5","2_temps_0")))
cgraph.addTransition(trans00000009)

val arcexp00000019 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000019 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000019 = (b:Binding00000001) => {b.entity.get}
val arc00000019 = new Arc[colset00000001,Binding00000001]("arc00000019",place00000016,trans00000009,Direction.PtT)
arc00000019.setIsBase(true)
arc00000019.setArcExp(arcexp00000019)
arc00000019.setTokenToBind(tTb00000019)
arc00000019.setBindToToken(bTt00000019)
arc00000019.setBindToToken(bTt00000019)
arc00000019.setOrigin(Map[String,String](("0-branch-5","arc00000019")))
cgraph.addArc(arc00000019)

val arcexp00000020 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000020 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000020 = (b:Binding00000001) => {b.entity.get}
val arc00000020 = new Arc[colset00000001,Binding00000001]("arc00000020",place00000015,trans00000009,Direction.TtP)
arc00000020.setIsBase(false)
arc00000020.setArcExp(arcexp00000020)
arc00000020.setTokenToBind(tTb00000020)
arc00000020.setBindToToken(bTt00000020)
arc00000020.setBindToToken(bTt00000020)
arc00000020.setOrigin(Map[String,String](("0-branch-5","arc00000020")))
cgraph.addArc(arc00000020)

val map00000017 = Map[(colset00000001,Long),Int](  )
val ms00000017 = new Multiset[colset00000001](map00000017)
val place00000017 = new Place("place00000017","2_bpo0s",ms00000017)
place00000017.setOrigin(Map[String,String](("0-branch-5","2_bpo0s")))
cgraph.addPlace(place00000017)

val trans00000010 = new Transition[Binding00000001]("trans00000010","2_temps_0",null,null)
trans00000010.setEval(Eval00000001)
trans00000010.setMerge(Merge00000001)
trans00000010.setOrigin(Map[String,String](("0-branch-5","2_temps_0")))
cgraph.addTransition(trans00000010)

val arcexp00000021 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000021 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000021 = (b:Binding00000001) => {b.entity.get}
val arc00000021 = new Arc[colset00000001,Binding00000001]("arc00000021",place00000015,trans00000010,Direction.PtT)
arc00000021.setIsBase(true)
arc00000021.setArcExp(arcexp00000021)
arc00000021.setTokenToBind(tTb00000021)
arc00000021.setBindToToken(bTt00000021)
arc00000021.setBindToToken(bTt00000021)
arc00000021.setOrigin(Map[String,String](("0-branch-5","arc00000021")))
cgraph.addArc(arc00000021)

val arcexp00000022 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000022 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000022 = (b:Binding00000001) => {b.entity.get}
val arc00000022 = new Arc[colset00000001,Binding00000001]("arc00000022",place00000017,trans00000010,Direction.TtP)
arc00000022.setIsBase(false)
arc00000022.setArcExp(arcexp00000022)
arc00000022.setTokenToBind(tTb00000022)
arc00000022.setBindToToken(bTt00000022)
arc00000022.setBindToToken(bTt00000022)
arc00000022.setOrigin(Map[String,String](("0-branch-5","arc00000022")))
cgraph.addArc(arc00000022)

val map00000018 = Map[(colset00000001,Long),Int](  )
val ms00000018 = new Multiset[colset00000001](map00000018)
val place00000018 = new Place("place00000018","2_bpo1s",ms00000018)
place00000018.setOrigin(Map[String,String](("0-branch-5","2_bpo1s")))
cgraph.addPlace(place00000018)

val trans00000011 = new Transition[Binding00000001]("trans00000011","2_temps_1",null,null)
trans00000011.setEval(Eval00000001)
trans00000011.setMerge(Merge00000001)
trans00000011.setOrigin(Map[String,String](("0-branch-5","2_temps_1")))
cgraph.addTransition(trans00000011)

val arcexp00000023 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000023 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000023 = (b:Binding00000001) => {b.entity.get}
val arc00000023 = new Arc[colset00000001,Binding00000001]("arc00000023",place00000015,trans00000011,Direction.PtT)
arc00000023.setIsBase(true)
arc00000023.setArcExp(arcexp00000023)
arc00000023.setTokenToBind(tTb00000023)
arc00000023.setBindToToken(bTt00000023)
arc00000023.setBindToToken(bTt00000023)
arc00000023.setOrigin(Map[String,String](("0-branch-5","arc00000023")))
cgraph.addArc(arc00000023)

val arcexp00000024 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000024 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000024 = (b:Binding00000001) => {b.entity.get}
val arc00000024 = new Arc[colset00000001,Binding00000001]("arc00000024",place00000018,trans00000011,Direction.TtP)
arc00000024.setIsBase(false)
arc00000024.setArcExp(arcexp00000024)
arc00000024.setTokenToBind(tTb00000024)
arc00000024.setBindToToken(bTt00000024)
arc00000024.setBindToToken(bTt00000024)
arc00000024.setOrigin(Map[String,String](("0-branch-5","arc00000024")))
cgraph.addArc(arc00000024)

val map00000019 = Map[(colset00000001,Long),Int](  )
val ms00000019 = new Multiset[colset00000001](map00000019)
val place00000019 = new Place("place00000019","1_bp",ms00000019)
place00000019.setOrigin(Map[String,String](("0-branch-6","1_bp")))
cgraph.addPlace(place00000019)

val map00000020 = Map[(colset00000001,Long),Int](  )
val ms00000020 = new Multiset[colset00000001](map00000020)
val place00000020 = new Place("place00000020","1_bpi0s",ms00000020)
place00000020.setOrigin(Map[String,String](("0-branch-6","1_bpi0s")))
cgraph.addPlace(place00000020)

val trans00000012 = new Transition[Binding00000001]("trans00000012","1_temps_0",null,null)
trans00000012.setEval(Eval00000001)
trans00000012.setMerge(Merge00000001)
trans00000012.setOrigin(Map[String,String](("0-branch-6","1_temps_0")))
cgraph.addTransition(trans00000012)

val arcexp00000025 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000025 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000025 = (b:Binding00000001) => {b.entity.get}
val arc00000025 = new Arc[colset00000001,Binding00000001]("arc00000025",place00000020,trans00000012,Direction.PtT)
arc00000025.setIsBase(true)
arc00000025.setArcExp(arcexp00000025)
arc00000025.setTokenToBind(tTb00000025)
arc00000025.setBindToToken(bTt00000025)
arc00000025.setBindToToken(bTt00000025)
arc00000025.setOrigin(Map[String,String](("0-branch-6","arc00000025")))
cgraph.addArc(arc00000025)

val arcexp00000026 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000026 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000026 = (b:Binding00000001) => {b.entity.get}
val arc00000026 = new Arc[colset00000001,Binding00000001]("arc00000026",place00000019,trans00000012,Direction.TtP)
arc00000026.setIsBase(false)
arc00000026.setArcExp(arcexp00000026)
arc00000026.setTokenToBind(tTb00000026)
arc00000026.setBindToToken(bTt00000026)
arc00000026.setBindToToken(bTt00000026)
arc00000026.setOrigin(Map[String,String](("0-branch-6","arc00000026")))
cgraph.addArc(arc00000026)

val map00000021 = Map[(colset00000001,Long),Int](  )
val ms00000021 = new Multiset[colset00000001](map00000021)
val place00000021 = new Place("place00000021","1_bpi1s",ms00000021)
place00000021.setOrigin(Map[String,String](("0-branch-6","1_bpi1s")))
cgraph.addPlace(place00000021)

val trans00000013 = new Transition[Binding00000001]("trans00000013","1_temps_1",null,null)
trans00000013.setEval(Eval00000001)
trans00000013.setMerge(Merge00000001)
trans00000013.setOrigin(Map[String,String](("0-branch-6","1_temps_1")))
cgraph.addTransition(trans00000013)

val arcexp00000027 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000027 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000027 = (b:Binding00000001) => {b.entity.get}
val arc00000027 = new Arc[colset00000001,Binding00000001]("arc00000027",place00000021,trans00000013,Direction.PtT)
arc00000027.setIsBase(true)
arc00000027.setArcExp(arcexp00000027)
arc00000027.setTokenToBind(tTb00000027)
arc00000027.setBindToToken(bTt00000027)
arc00000027.setBindToToken(bTt00000027)
arc00000027.setOrigin(Map[String,String](("0-branch-6","arc00000027")))
cgraph.addArc(arc00000027)

val arcexp00000028 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000028 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000028 = (b:Binding00000001) => {b.entity.get}
val arc00000028 = new Arc[colset00000001,Binding00000001]("arc00000028",place00000019,trans00000013,Direction.TtP)
arc00000028.setIsBase(false)
arc00000028.setArcExp(arcexp00000028)
arc00000028.setTokenToBind(tTb00000028)
arc00000028.setBindToToken(bTt00000028)
arc00000028.setBindToToken(bTt00000028)
arc00000028.setOrigin(Map[String,String](("0-branch-6","arc00000028")))
cgraph.addArc(arc00000028)

val map00000022 = Map[(colset00000001,Long),Int](  )
val ms00000022 = new Multiset[colset00000001](map00000022)
val place00000022 = new Place("place00000022","1_bpo0s",ms00000022)
place00000022.setOrigin(Map[String,String](("0-branch-6","1_bpo0s")))
cgraph.addPlace(place00000022)

val trans00000014 = new Transition[Binding00000001]("trans00000014","1_temps_0",null,null)
trans00000014.setEval(Eval00000001)
trans00000014.setMerge(Merge00000001)
trans00000014.setOrigin(Map[String,String](("0-branch-6","1_temps_0")))
cgraph.addTransition(trans00000014)

val arcexp00000029 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000029 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000029 = (b:Binding00000001) => {b.entity.get}
val arc00000029 = new Arc[colset00000001,Binding00000001]("arc00000029",place00000019,trans00000014,Direction.PtT)
arc00000029.setIsBase(true)
arc00000029.setArcExp(arcexp00000029)
arc00000029.setTokenToBind(tTb00000029)
arc00000029.setBindToToken(bTt00000029)
arc00000029.setBindToToken(bTt00000029)
arc00000029.setOrigin(Map[String,String](("0-branch-6","arc00000029")))
cgraph.addArc(arc00000029)

val arcexp00000030 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000030 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000030 = (b:Binding00000001) => {b.entity.get}
val arc00000030 = new Arc[colset00000001,Binding00000001]("arc00000030",place00000022,trans00000014,Direction.TtP)
arc00000030.setIsBase(false)
arc00000030.setArcExp(arcexp00000030)
arc00000030.setTokenToBind(tTb00000030)
arc00000030.setBindToToken(bTt00000030)
arc00000030.setBindToToken(bTt00000030)
arc00000030.setOrigin(Map[String,String](("0-branch-6","arc00000030")))
cgraph.addArc(arc00000030)

val map00000023 = Map[(colset00000001,Long),Int](  )
val ms00000023 = new Multiset[colset00000001](map00000023)
val place00000023 = new Place("place00000023","2_bp",ms00000023)
place00000023.setOrigin(Map[String,String](("0-branch-7","2_bp")))
cgraph.addPlace(place00000023)

val map00000024 = Map[(colset00000001,Long),Int](  )
val ms00000024 = new Multiset[colset00000001](map00000024)
val place00000024 = new Place("place00000024","2_bpi0s",ms00000024)
place00000024.setOrigin(Map[String,String](("0-branch-7","2_bpi0s")))
cgraph.addPlace(place00000024)

val trans00000015 = new Transition[Binding00000001]("trans00000015","2_temps_0",null,null)
trans00000015.setEval(Eval00000001)
trans00000015.setMerge(Merge00000001)
trans00000015.setOrigin(Map[String,String](("0-branch-7","2_temps_0")))
cgraph.addTransition(trans00000015)

val arcexp00000031 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000031 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000031 = (b:Binding00000001) => {b.entity.get}
val arc00000031 = new Arc[colset00000001,Binding00000001]("arc00000031",place00000024,trans00000015,Direction.PtT)
arc00000031.setIsBase(true)
arc00000031.setArcExp(arcexp00000031)
arc00000031.setTokenToBind(tTb00000031)
arc00000031.setBindToToken(bTt00000031)
arc00000031.setBindToToken(bTt00000031)
arc00000031.setOrigin(Map[String,String](("0-branch-7","arc00000031")))
cgraph.addArc(arc00000031)

val arcexp00000032 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000032 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000032 = (b:Binding00000001) => {b.entity.get}
val arc00000032 = new Arc[colset00000001,Binding00000001]("arc00000032",place00000023,trans00000015,Direction.TtP)
arc00000032.setIsBase(false)
arc00000032.setArcExp(arcexp00000032)
arc00000032.setTokenToBind(tTb00000032)
arc00000032.setBindToToken(bTt00000032)
arc00000032.setBindToToken(bTt00000032)
arc00000032.setOrigin(Map[String,String](("0-branch-7","arc00000032")))
cgraph.addArc(arc00000032)

val map00000025 = Map[(colset00000001,Long),Int](  )
val ms00000025 = new Multiset[colset00000001](map00000025)
val place00000025 = new Place("place00000025","2_bpo0s",ms00000025)
place00000025.setOrigin(Map[String,String](("0-branch-7","2_bpo0s")))
cgraph.addPlace(place00000025)

val trans00000016 = new Transition[Binding00000001]("trans00000016","2_temps_0",null,null)
trans00000016.setEval(Eval00000001)
trans00000016.setMerge(Merge00000001)
trans00000016.setOrigin(Map[String,String](("0-branch-7","2_temps_0")))
cgraph.addTransition(trans00000016)

val arcexp00000033 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000033 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000033 = (b:Binding00000001) => {b.entity.get}
val arc00000033 = new Arc[colset00000001,Binding00000001]("arc00000033",place00000023,trans00000016,Direction.PtT)
arc00000033.setIsBase(true)
arc00000033.setArcExp(arcexp00000033)
arc00000033.setTokenToBind(tTb00000033)
arc00000033.setBindToToken(bTt00000033)
arc00000033.setBindToToken(bTt00000033)
arc00000033.setOrigin(Map[String,String](("0-branch-7","arc00000033")))
cgraph.addArc(arc00000033)

val arcexp00000034 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000034 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000034 = (b:Binding00000001) => {b.entity.get}
val arc00000034 = new Arc[colset00000001,Binding00000001]("arc00000034",place00000025,trans00000016,Direction.TtP)
arc00000034.setIsBase(false)
arc00000034.setArcExp(arcexp00000034)
arc00000034.setTokenToBind(tTb00000034)
arc00000034.setBindToToken(bTt00000034)
arc00000034.setBindToToken(bTt00000034)
arc00000034.setOrigin(Map[String,String](("0-branch-7","arc00000034")))
cgraph.addArc(arc00000034)

val trans00000017 = new Transition[Binding00000001]("trans00000017","",null,null)
trans00000017.setEval(Eval00000001)
trans00000017.setMerge(Merge00000001)
trans00000017.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000017)

val arcexp00000035 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000035 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000035 = (b:Binding00000001) => {b.entity.get}
val arc00000035 = new Arc[colset00000001,Binding00000001]("arc00000035",place00000002,trans00000017,Direction.PtT)
arc00000035.setIsBase(true)
arc00000035.setArcExp(arcexp00000035)
arc00000035.setTokenToBind(tTb00000035)
arc00000035.setBindToToken(bTt00000035)
arc00000035.setBindToToken(bTt00000035)
arc00000035.setOrigin(Map[String,String](("Connector","arc00000035")))
cgraph.addArc(arc00000035)

val arcexp00000036 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000036 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000036 = (b:Binding00000001) => {b.entity.get}
val arc00000036 = new Arc[colset00000001,Binding00000001]("arc00000036",place00000012,trans00000017,Direction.TtP)
arc00000036.setIsBase(true)
arc00000036.setArcExp(arcexp00000036)
arc00000036.setTokenToBind(tTb00000036)
arc00000036.setBindToToken(bTt00000036)
arc00000036.setBindToToken(bTt00000036)
arc00000036.setOrigin(Map[String,String](("Connector","arc00000036")))
cgraph.addArc(arc00000036)

val trans00000018 = new Transition[Binding00000001]("trans00000018","",null,null)
trans00000018.setEval(Eval00000001)
trans00000018.setMerge(Merge00000001)
trans00000018.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000018)

val arcexp00000037 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000037 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000037 = (b:Binding00000001) => {b.entity.get}
val arc00000037 = new Arc[colset00000001,Binding00000001]("arc00000037",place00000013,trans00000018,Direction.PtT)
arc00000037.setIsBase(true)
arc00000037.setArcExp(arcexp00000037)
arc00000037.setTokenToBind(tTb00000037)
arc00000037.setBindToToken(bTt00000037)
arc00000037.setBindToToken(bTt00000037)
arc00000037.setOrigin(Map[String,String](("Connector","arc00000037")))
cgraph.addArc(arc00000037)

val arcexp00000038 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000038 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000038 = (b:Binding00000001) => {b.entity.get}
val arc00000038 = new Arc[colset00000001,Binding00000001]("arc00000038",place00000020,trans00000018,Direction.TtP)
arc00000038.setIsBase(true)
arc00000038.setArcExp(arcexp00000038)
arc00000038.setTokenToBind(tTb00000038)
arc00000038.setBindToToken(bTt00000038)
arc00000038.setBindToToken(bTt00000038)
arc00000038.setOrigin(Map[String,String](("Connector","arc00000038")))
cgraph.addArc(arc00000038)

val trans00000019 = new Transition[Binding00000001]("trans00000019","",null,null)
trans00000019.setEval(Eval00000001)
trans00000019.setMerge(Merge00000001)
trans00000019.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000019)

val arcexp00000039 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000039 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000039 = (b:Binding00000001) => {b.entity.get}
val arc00000039 = new Arc[colset00000001,Binding00000001]("arc00000039",place00000014,trans00000019,Direction.PtT)
arc00000039.setIsBase(true)
arc00000039.setArcExp(arcexp00000039)
arc00000039.setTokenToBind(tTb00000039)
arc00000039.setBindToToken(bTt00000039)
arc00000039.setBindToToken(bTt00000039)
arc00000039.setOrigin(Map[String,String](("Connector","arc00000039")))
cgraph.addArc(arc00000039)

val arcexp00000040 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000040 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000040 = (b:Binding00000001) => {b.entity.get}
val arc00000040 = new Arc[colset00000001,Binding00000001]("arc00000040",place00000007,trans00000019,Direction.TtP)
arc00000040.setIsBase(true)
arc00000040.setArcExp(arcexp00000040)
arc00000040.setTokenToBind(tTb00000040)
arc00000040.setBindToToken(bTt00000040)
arc00000040.setBindToToken(bTt00000040)
arc00000040.setOrigin(Map[String,String](("Connector","arc00000040")))
cgraph.addArc(arc00000040)

val trans00000020 = new Transition[Binding00000001]("trans00000020","",null,null)
trans00000020.setEval(Eval00000001)
trans00000020.setMerge(Merge00000001)
trans00000020.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000020)

val arcexp00000041 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000041 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000041 = (b:Binding00000001) => {b.entity.get}
val arc00000041 = new Arc[colset00000001,Binding00000001]("arc00000041",place00000009,trans00000020,Direction.PtT)
arc00000041.setIsBase(true)
arc00000041.setArcExp(arcexp00000041)
arc00000041.setTokenToBind(tTb00000041)
arc00000041.setBindToToken(bTt00000041)
arc00000041.setBindToToken(bTt00000041)
arc00000041.setOrigin(Map[String,String](("Connector","arc00000041")))
cgraph.addArc(arc00000041)

val arcexp00000042 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000042 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000042 = (b:Binding00000001) => {b.entity.get}
val arc00000042 = new Arc[colset00000001,Binding00000001]("arc00000042",place00000016,trans00000020,Direction.TtP)
arc00000042.setIsBase(true)
arc00000042.setArcExp(arcexp00000042)
arc00000042.setTokenToBind(tTb00000042)
arc00000042.setBindToToken(bTt00000042)
arc00000042.setBindToToken(bTt00000042)
arc00000042.setOrigin(Map[String,String](("Connector","arc00000042")))
cgraph.addArc(arc00000042)

val trans00000021 = new Transition[Binding00000001]("trans00000021","",null,null)
trans00000021.setEval(Eval00000001)
trans00000021.setMerge(Merge00000001)
trans00000021.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000021)

val arcexp00000043 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000043 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000043 = (b:Binding00000001) => {b.entity.get}
val arc00000043 = new Arc[colset00000001,Binding00000001]("arc00000043",place00000017,trans00000021,Direction.PtT)
arc00000043.setIsBase(true)
arc00000043.setArcExp(arcexp00000043)
arc00000043.setTokenToBind(tTb00000043)
arc00000043.setBindToToken(bTt00000043)
arc00000043.setBindToToken(bTt00000043)
arc00000043.setOrigin(Map[String,String](("Connector","arc00000043")))
cgraph.addArc(arc00000043)

val arcexp00000044 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000044 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000044 = (b:Binding00000001) => {b.entity.get}
val arc00000044 = new Arc[colset00000001,Binding00000001]("arc00000044",place00000021,trans00000021,Direction.TtP)
arc00000044.setIsBase(true)
arc00000044.setArcExp(arcexp00000044)
arc00000044.setTokenToBind(tTb00000044)
arc00000044.setBindToToken(bTt00000044)
arc00000044.setBindToToken(bTt00000044)
arc00000044.setOrigin(Map[String,String](("Connector","arc00000044")))
cgraph.addArc(arc00000044)

val trans00000022 = new Transition[Binding00000001]("trans00000022","",null,null)
trans00000022.setEval(Eval00000001)
trans00000022.setMerge(Merge00000001)
trans00000022.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000022)

val arcexp00000045 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000045 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000045 = (b:Binding00000001) => {b.entity.get}
val arc00000045 = new Arc[colset00000001,Binding00000001]("arc00000045",place00000018,trans00000022,Direction.PtT)
arc00000045.setIsBase(true)
arc00000045.setArcExp(arcexp00000045)
arc00000045.setTokenToBind(tTb00000045)
arc00000045.setBindToToken(bTt00000045)
arc00000045.setBindToToken(bTt00000045)
arc00000045.setOrigin(Map[String,String](("Connector","arc00000045")))
cgraph.addArc(arc00000045)

val arcexp00000046 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000046 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000046 = (b:Binding00000001) => {b.entity.get}
val arc00000046 = new Arc[colset00000001,Binding00000001]("arc00000046",null,trans00000022,Direction.TtP)
arc00000046.setIsBase(true)
arc00000046.setArcExp(arcexp00000046)
arc00000046.setTokenToBind(tTb00000046)
arc00000046.setBindToToken(bTt00000046)
arc00000046.setBindToToken(bTt00000046)
arc00000046.setOrigin(Map[String,String](("Connector","arc00000046")))
cgraph.addArc(arc00000046)

val trans00000023 = new Transition[Binding00000001]("trans00000023","",null,null)
trans00000023.setEval(Eval00000001)
trans00000023.setMerge(Merge00000001)
trans00000023.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000023)

val arcexp00000047 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000047 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000047 = (b:Binding00000001) => {b.entity.get}
val arc00000047 = new Arc[colset00000001,Binding00000001]("arc00000047",place00000022,trans00000023,Direction.PtT)
arc00000047.setIsBase(true)
arc00000047.setArcExp(arcexp00000047)
arc00000047.setTokenToBind(tTb00000047)
arc00000047.setBindToToken(bTt00000047)
arc00000047.setBindToToken(bTt00000047)
arc00000047.setOrigin(Map[String,String](("Connector","arc00000047")))
cgraph.addArc(arc00000047)

val arcexp00000048 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000048 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000048 = (b:Binding00000001) => {b.entity.get}
val arc00000048 = new Arc[colset00000001,Binding00000001]("arc00000048",place00000004,trans00000023,Direction.TtP)
arc00000048.setIsBase(true)
arc00000048.setArcExp(arcexp00000048)
arc00000048.setTokenToBind(tTb00000048)
arc00000048.setBindToToken(bTt00000048)
arc00000048.setBindToToken(bTt00000048)
arc00000048.setOrigin(Map[String,String](("Connector","arc00000048")))
cgraph.addArc(arc00000048)

val trans00000024 = new Transition[Binding00000001]("trans00000024","",null,null)
trans00000024.setEval(Eval00000001)
trans00000024.setMerge(Merge00000001)
trans00000024.setOrigin(Map[String,String](("Connector","")))
cgraph.addTransition(trans00000024)

val arcexp00000049 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000049 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000049 = (b:Binding00000001) => {b.entity.get}
val arc00000049 = new Arc[colset00000001,Binding00000001]("arc00000049",place00000025,trans00000024,Direction.PtT)
arc00000049.setIsBase(true)
arc00000049.setArcExp(arcexp00000049)
arc00000049.setTokenToBind(tTb00000049)
arc00000049.setBindToToken(bTt00000049)
arc00000049.setBindToToken(bTt00000049)
arc00000049.setOrigin(Map[String,String](("Connector","arc00000049")))
cgraph.addArc(arc00000049)

val arcexp00000050 = (inp:Any) => inp match { case entity:colset00000001 => { Some(entity) } }
val tTb00000050 = (inp:Any) => Binding00000001(inp match { case entity:colset00000001 => Some(entity); case _ => None })
val bTt00000050 = (b:Binding00000001) => {b.entity.get}
val arc00000050 = new Arc[colset00000001,Binding00000001]("arc00000050",place00000010,trans00000024,Direction.TtP)
arc00000050.setIsBase(true)
arc00000050.setArcExp(arcexp00000050)
arc00000050.setTokenToBind(tTb00000050)
arc00000050.setBindToToken(bTt00000050)
arc00000050.setBindToToken(bTt00000050)
arc00000050.setOrigin(Map[String,String](("Connector","arc00000050")))
cgraph.addArc(arc00000050)

